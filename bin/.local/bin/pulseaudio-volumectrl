#!/bin/bash

# finds the active sink for pulse audio and increments the volume. useful when you have multiple audio outputs and have a key bound to vol-up and down
      
function usage {
    echo "Usage: `basename $0` [sink_index] [up|down|mute|unmute|toggle-mute|sync]"
    exit -1
}

if [ $# -ne 1 ]
then
    usage
fi


inc='5'
tmpfile='/tmp/pasink.tmp'
autosync='yes'

active_sink=`pacmd list-sinks |awk '/.* index:/{print $3}'`
limit=$(expr 100 - ${inc})

function notify-volume {
    getCurVol

    if [ "$curVol" = "0" ]; then
        icon_name="notification-audio-volume-off"
    else
        if [ "$curVol" -lt "33" ]; then
        icon_name="notification-audio-volume-low"
        else
        if [ "$curVol" -lt "67" ]; then
            icon_name="notification-audio-volume-medium"
        else
            icon_name="notification-audio-volume-high"
        fi
        fi
    fi

    notify-send " " -i $icon_name -h int:value:$curVol -h string:synchronous:volume
}

function volUp {
    getCurVol

    if [ ${curVol} -le 100 -a ${curVol} -ge ${limit} ]
    then
            pactl set-sink-volume ${active_sink} 100%
    elif [ ${curVol} -lt ${limit} ]
    then
            pactl set-sink-volume ${active_sink} +${inc}%
    fi

    notify-volume

    if [ ${autosync} = 'yes' ]
    then
            volSync
    fi
}

function volDown {
    pactl set-sink-volume ${active_sink} -${inc}%

    notify-volume

    if [ ${autosync} = 'yes' ]
    then
            volSync
    fi

}

function getSinkInputs {
    inputs=`pacmd list-sink-inputs |grep -B 4 'sink: '${1}' ' |awk '/index:/{print $2}' >${tmpfile}`
    input_array=`cat $tmpfile`
}

function volSync {
    getSinkInputs ${active_sink}
    getCurVol

    for each in ${input_array}
    do
            pactl set-sink-input-volume ${each} ${curVol}%
    done
}

function getCurVol {
    curVol=`pacmd list-sinks |grep -wA 15 'index: '${active_sink}'' |grep 'volume:' |egrep -v 'base volume:' |awk -F : '{print $3}' |grep -o -P '.{0,3}%'|sed s/.$// |tr -d ' '`
}

function volMute {
    case "$1" in
        mute)
            pactl set-sink-mute ${active_sink} 1
            notify-send " " -i "notification-audio-volume-muted" -h int:value:0 -h string:synchronous:volume
            ;;
        unmute)
            pactl set-sink-mute ${active_sink} 0
            notify-volume
            ;;
    esac
}

function toggleMute {
    curStatus=`pacmd list-sinks |grep -A 15 'index: '${active_sink}'' |awk '/muted/{ print $2}'`

    if [ ${curStatus} = 'yes' ]
    then
        volMute unmute
    else
        volMute mute
    fi
}


case "$1" in
    up)
        volUp
        ;;
    down)
        volDown
        ;;
    toggle-mute)
        toggleMute
        ;;
    mute)
        volMute mute
        ;;
    unmute)
        volMute unmute
        ;;
    sync)
        volSync
        ;;
    *)
        usage
        ;;
esac
# vim: set ts=4 sw=4:
